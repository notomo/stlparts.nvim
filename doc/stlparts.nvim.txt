*stlparts.nvim.txt*

==============================================================================
Lua module: stlparts                                  *stlparts.nvim-stlparts*

build({name}, {opts})                                       *stlparts.build()*
  Returns a 'statusline' string.

  Parameters: ~
    {name} (string) registered name by |stlparts.set()|
    {opts} (table|nil) {window_id = nil, hl_group = "StatusLine"}

  Return: ~
    (string) statusline expression string

component({name})                                       *stlparts.component()*
  Returns a component function.

  Parameters: ~
    {name} (string) component name

  Return: ~
    (function) component constructor function

set({name}, {component})                                      *stlparts.set()*
  Set a component.

  Parameters: ~
    {name} (string) use to refer from |stlparts.build()|
    {component} (table|function) |stlparts.nvim-types-component|

==============================================================================
COMPONENTS                                          *stlparts.nvim-components*

new({create_component})                     *stlparts.component.builder.new()*
  Build components dynamically.

  Parameters: ~
    {create_component} (function) |stlparts.nvim-types-component|

  Return: ~
    (table) |stlparts.nvim-types-component|

new({hl_group}, {component})      *stlparts.component.default_highlight.new()*
  Set default highlight group to use in children components.

  Parameters: ~
    {hl_group} (string) highlight group
    {component} (function|table) |stlparts.nvim-types-component|

  Return: ~
    (table) |stlparts.nvim-types-component|

new({mapping}, {default})                 *stlparts.component.file_type.new()*
  Switch by whether mapping has filetype matched with the buffer's filetype.

  Parameters: ~
    {mapping} (function|table) |stlparts.nvim-types-component|
    {default} (function|table) |stlparts.nvim-types-component|

  Return: ~
    (table) |stlparts.nvim-types-component|

new({hl_group}, {component})              *stlparts.component.highlight.new()*
  Highlight component.

  Parameters: ~
    {hl_group} (string) highlight group
    {component} (function|table) |stlparts.nvim-types-component|

  Return: ~
    (table) |stlparts.nvim-types-component|

new({components}, {opts})                      *stlparts.component.list.new()*
  Listing components.

  Parameters: ~
    {components} (table) list of |stlparts.nvim-types-component|
    {opts} (table|nil) default: {separator = " "}

  Return: ~
    (table) |stlparts.nvim-types-component|

new({component}, {opts})                    *stlparts.component.padding.new()*
  Add padding.

  Parameters: ~
    {component} (function|table) |stlparts.nvim-types-component|
    {opts} (table|nil) default: {left = 1, right = 1}

  Return: ~
    (table) |stlparts.nvim-types-component|

new({left}, {right})                       *stlparts.component.separate.new()*
  Separate by '%='. see |statusline|.

  Parameters: ~
    {left} (function|table) |stlparts.nvim-types-component|
    {right} (function|table) |stlparts.nvim-types-component|

  Return: ~
    (table) |stlparts.nvim-types-component|

new({tabpage}, {component})                     *stlparts.component.tab.new()*
  Make tab component that can be used in tabline.

  Parameters: ~
    {tabpage} (number) tabpage handle, or 0 for current tabpage
    {component} (function|table) |stlparts.nvim-types-component|

  Return: ~
    (table) |stlparts.nvim-types-component|

new({component}, {opts})              *stlparts.component.trancate_left.new()*
  Trancate left string by window width.

  Parameters: ~
    {component} (function|table) |stlparts.nvim-types-component|
    {opts} (table|nil) default: {max_width = number|function(ctx) return ctx:window_width() end, ellipsis = ".."}

  Return: ~
    (table) |stlparts.nvim-types-component|

==============================================================================
TYPES                                                    *stlparts.nvim-TYPES*

Component                                      *stlparts.nvim-types-component*

Type is one of the following:
- (function): returns string
- (table): {new = `component constructor`, build = `function returns string`}


==============================================================================
EXAMPLES                                              *stlparts.nvim-EXAMPLES*

>lua
  local stlparts = require("stlparts")

  local path = function()
    return vim.fn.expand("%:p:~")
  end

  local column = function()
    return vim.fn.col(".")
  end

  local filetype = function()
    return vim.bo.filetype
  end

  local Padding = stlparts.component("padding")
  local Separate = stlparts.component("separate")

  stlparts.set("default", Padding(Separate(path, { column, " ", filetype })))

  vim.opt.statusline = [[%!v:lua.require("stlparts").build("default")]]
<

==============================================================================
vim:tw=78:ts=8:ft=help
