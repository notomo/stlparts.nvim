*stlparts.nvim.txt*

==============================================================================
Lua module: stlparts                                  *stlparts.nvim-stlparts*

build({name}, {opts})                                       *stlparts.build()*
  Returns a 'statusline' string.

  Parameters: ~
    {name} (string) registered name by |stlparts.set()|
    {opts} (StlpartsBuildOption?) |StlpartsBuildOption|

  Return: ~
    (string) statusline expression string

component                                                 *stlparts.component*
  Components accessor.
  - Usage: `require("stlparts").component.{component_name}`
  - Example: |stlparts.nvim-EXAMPLES|
  - All components: |stlparts.nvim-COMPONENTS|

set({name}, {component})                                      *stlparts.set()*
  Set a component.

  Parameters: ~
    {name} (string) use to refer from |stlparts.build()|
    {component} (StlpartsComponent) |StlpartsComponent|

==============================================================================
COMPONENTS                                          *stlparts.nvim-COMPONENTS*

builder({create_component})                     *stlparts.component.builder()*
  Build components dynamically.

  Parameters: ~
    {create_component} (fun(ctx:StlpartsContext):StlpartsComponent) 

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

context_builder({make_context}, {component})
                                        *stlparts.component.context_builder()*
  Build context and pass to children components.

  Parameters: ~
    {make_context} (fun(ctx:StlpartsContext):StlpartsContext) 
    {component} (StlpartsComponent) |StlpartsComponent|

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

default_highlight({hl_group}, {component})
                                      *stlparts.component.default_highlight()*
  Set default highlight group to use in children components.

  Parameters: ~
    {hl_group} (string) highlight group
    {component} (StlpartsComponent) |StlpartsComponent|

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

highlight({hl_group}, {component})            *stlparts.component.highlight()*
  Highlight component.

  Parameters: ~
    {hl_group} (string) highlight group
    {component} (StlpartsComponent) |StlpartsComponent|

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

separate({components})                         *stlparts.component.separate()*
  Separate each components by '%='. see |statusline|.

  Parameters: ~
    {components} (StlpartsComponent[]) |StlpartsComponent|

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

switch({make_key}, {mapping}, {opts})            *stlparts.component.switch()*
  Switch by whether mapping has filetype matched with the buffer's filetype.

  Parameters: ~
    {make_key} (fun(ctx:StlpartsContext):string) returns key to switch mapping table value. |StlpartsContext|
    {mapping} (table<string,StlpartsFunctionComponent>) 
    {opts} (StlpartsSwitchOption?) |StlpartsSwitchOption|

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

StlpartsSwitchOption                                    *StlpartsSwitchOption*

- {defualt_key} (string?) default: "_"

tab({tabpage}, {component})                         *stlparts.component.tab()*
  Make tab component that can be used in tabline.

  Parameters: ~
    {tabpage} (integer) tabpage handle, or 0 for current tabpage
    {component} (StlpartsComponent) |StlpartsComponent|

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

truncate_left({component}, {opts})        *stlparts.component.truncate_left()*
  Truncate left string by window width.

  Parameters: ~
    {component} (StlpartsComponent) Limitation: separate, highlight component does not work under truncate_left component.
    {opts} (StlpartsTruncateLeftOption?) 

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

StlpartsTruncateLeftOption                        *StlpartsTruncateLeftOption*

- {max_width} ((number|fun(ctx:StlpartsContext):number)?) default: window width
- {ellipsis} (string?) default: ".."

truncate_right({component})              *stlparts.component.truncate_right()*
  Truncate right string by window width.

  Parameters: ~
    {component} (StlpartsComponent) Limitation: separate, highlight component does not work under truncate_left component.

  Return: ~
    (StlpartsFunctionComponent) |StlpartsFunctionComponent|

==============================================================================
STRUCTURE                                            *stlparts.nvim-STRUCTURE*

StlpartsBuildOption                                      *StlpartsBuildOption*

- {window_id} (integer?)
- {hl_group} (string?) default: "StatusLine"

StlpartsContext                                              *StlpartsContext*

- {window_id} (integer)
- {hl_group} (string)
- {tab_id} (integer|nil) not nil if the component has tab component ancestor
- {width} (fun(self:StlpartsContext):integer)
- {with_highlight} (fun(self:StlpartsContext,hl_group:string):StlpartsContext)
- {with_window} (fun(self:StlpartsContext,window_id:integer):StlpartsContext)

==============================================================================
EXAMPLES                                              *stlparts.nvim-EXAMPLES*

>lua
  local stlparts = require("stlparts")

  local path = function()
    return vim.fn.expand("%:p:~")
  end

  local column = function()
    return vim.fn.col(".")
  end

  local filetype = function()
    return vim.bo.filetype
  end

  local Separate = stlparts.component.separate

  stlparts.set("default", {
    " ",
    Separate({
      path,
      { column, " ", filetype },
    }),
    " ",
  })

  vim.opt.statusline = [[%!v:lua.require("stlparts").build("default")]]
<

==============================================================================
vim:tw=78:ts=8:ft=help
